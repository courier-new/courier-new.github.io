$maastricht: #061826;
$space: #4c6172;
$sapphire: #17179f;
$turquoise: #4cdbc8;
$magnolia: #fdf4fc;
$mauve: #c17fba;
$cheddar: #fecb49;
$raspberry: #e80645;
$white: #fff;
$black: #000;

$low-opacity-maastricht: rgba(4, 17, 26, 0.4);
$low-opacity-white: rgba(255, 255, 255, 0.4);

$light-sapphire: desaturate(lighten($sapphire, 15%), 20%);
$light-space: lighten($space, 20%);
$medium-cheddar: darken($cheddar, 25%);
$medium-magnolia: desaturate(darken($magnolia, 15%), 40%);
$dark-magnolia: desaturate(darken($magnolia, 20%), 50%);
$medium-mauve: desaturate(darken($mauve, 10%), 10%);
$medium-turquoise: saturate(darken($turquoise, 30%), 100%);
$medium-raspberry: desaturate($raspberry, 20%);
$darker-maastricht: darken($maastricht, 3%);

$light-colors: (
  'maastricht': $maastricht,
  'space': $space,
  'sapphire': $sapphire,
  'turquoise': $turquoise,
  'magnolia': $magnolia,
  'mauve': $mauve,
  'cheddar': $cheddar,
  'raspberry': $raspberry,
  'white': $white,
  'low-opacity-white': $low-opacity-white,
  'black': $darker-maastricht,
);

$dark-colors: (
  'maastricht': $white,
  'space': $dark-magnolia,
  'sapphire': $light-sapphire,
  'turquoise': $medium-turquoise,
  'magnolia': $maastricht,
  'mauve': $medium-mauve,
  'cheddar': $medium-cheddar,
  'raspberry': $medium-raspberry,
  'white': $darker-maastricht,
  'low-opacity-white': $low-opacity-maastricht,
  'black': $light-space,
);

/* Mixin to generate styles based on the theme colors for a given attribute, one
per color, based on here:
https://frontstuff.io/generate-all-your-utility-classes-with-sass-maps */
@mixin color-modifiers($attribute: 'color', $color-set: $light-colors) {
  @each $name, $hex in $color-set {
    &#{'-'}#{$name} {
      #{$attribute}: $hex;
    }
  }
}

@mixin use-theme-colors($color-set: $light-colors) {
  /* Default text and background color */
  background-color: map-get($color-set, 'white');
  color: map-get($color-set, 'black');

  body,
  span,
  p,
  ul,
  li {
    color: map-get($color-set, 'black');
  }

  a {
    color: map-get($color-set, 'space');
    text-decoration-color: map-get($color-set, 'turquoise');
  }

  /* Text color styles */
  .text {
    @include color-modifiers('color', $color-set);
  }

  h1 {
    color: map-get($color-set, 'space');
  }

  h2 {
    color: map-get($color-set, 'maastricht');
  }

  h3 {
    color: map-get($color-set, 'sapphire');
  }

  h4 {
    color: map-get($color-set, 'raspberry');
  }

  a:not(.no-hover):hover {
    color: map-get($color-set, 'maastricht');
  }

  :not(.no-hover).text-turquoise:hover {
    color: map-get($color-set, 'space');
  }

  /* Background color styles */
  .background {
    @include color-modifiers('background-color', $color-set);
  }

  .background-low-opacity {
    background-color: map-get($color-set, 'low-opacity-white');
  }

  /* Border color styles */
  .border-color {
    @include color-modifiers('border-color', $color-set);
  }

  .button {
    background: map-get($color-set, 'space');
    border-radius: 3em;
    margin: 0 0.5em 0.5em 0;
    padding: 0.5em 0.8em;
    transition: all 0.2s linear;

    &:hover {
      background: map-get($color-set, 'raspberry');
    }
  }

  .text-button {
    color: map-get($color-set, 'space');
    transition: all 0.2s linear;

    &:hover {
      color: map-get($color-set, 'raspberry');
    }
  }
}

/* LIGHT THEME */
[data-theme='light'] {
  @include use-theme-colors($light-colors);
}

#nav {
  @include use-theme-colors($light-colors);

  a:hover .text-magnolia {
    color: $light-space;
  }
}

/* DARK THEME */
[data-theme='dark'] {
  @include use-theme-colors($dark-colors);
}

/* EXCLUDED FROM THEME */
.gradient-background {
  background: map-get($light-colors, 'maastricht');
  background:
    linear-gradient(108deg,
    map-get($light-colors, 'sapphire') 6vw,
    map-get($light-colors, 'turquoise') 28vw,
    map-get($light-colors, 'magnolia') 50vw,
    map-get($light-colors, 'cheddar') 72vw,
    map-get($light-colors, 'raspberry') 94vw);
}
